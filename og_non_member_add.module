<?php
/**
 * Implements hook_ctools_plugin_directory().
 */
function og_public_add_group_content_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return "plugins/entityreference/$plugin";
  }
}

/**
 * Implements hook_og_user_access_alter().
 *
 * Deny create permissions from non-members on "non-public" groups (i.e. groups
 * that don't allow joining without approval).
 
function og_public_add_group_content_og_user_access_alter(&$perm, $context) {
  $account = $context['account'];
  $cache = &drupal_static(__FUNCTION__, array());
  if (!empty($cache[$account->uid])) {
    // We already changed the permissions.
    return;
  }

  $cache[$account->uid] = TRUE;
  $group_type = $context['group_type'];
  $group = $context['group'];

  if ($group_type != 'node') {
    return;
  }

  if (og_is_member($group_type, $group->nid, 'user', $account)) {
    // The user is a group member, so comply to the OG permissions.
    return;
  }

  $wrapper = entity_metadata_wrapper($group_type, $group);
  $access_create = $wrapper->field_og_subscribe_settings->value() == 'anyone';

  // Make sure user can view group (i.e. it's not private).
  $group_bundles = og_get_all_group_bundle();
  if (empty($group_bundles['node'])) {
    // Make sure group_bundles contains at least the group node bundle, in order
    // to create the group audience field for it when installing the profile.
    $group_bundles['node'] = array('group' => TRUE);
  }

  //$commons_groups_entity_types = commons_groups_get_group_content_entity_types();
  foreach (array_keys($group_bundles['node']) as $type) {
    $perm["create $type content"] = $access_create;
  }
} */